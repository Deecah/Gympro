package dao;

import connectDB.ConnectDatabase;
import controller.NotificationServlet;
import model.Notification;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.User;
import org.apache.http.HttpRequest;

public class NotificationDAO {

    private static final Logger LOGGER = Logger.getLogger(NotificationDAO.class.getName());
    
    public List<Notification> getNotificationsByUserId(int userId) throws ClassNotFoundException {
        List<Notification> notifications = new ArrayList<>();
        String sql = "SELECT * FROM [dbo].[Notification] " +
                     "WHERE UserID = ? " +
                     "ORDER BY CreatedTime DESC";

        ConnectDatabase db = ConnectDatabase.getInstance();
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            con = db.openConnection(); // M·ªü k·∫øt n·ªëi
            ps = con.prepareStatement(sql); // Chu·∫©n b·ªã c√¢u l·ªánh SQL
            ps.setInt(1, userId); // ƒê·∫∑t gi√° tr·ªã cho tham s·ªë UserID
            rs = ps.executeQuery(); // Th·ª±c thi truy v·∫•n

            while (rs.next()) { // Duy·ªát qua c√°c h√†ng k·∫øt qu·∫£
                Notification notification = new Notification();
                notification.setNotificationID(rs.getInt("NotificationID"));
                notification.setUserID(rs.getInt("UserID"));
                notification.setTitle(rs.getString("NotificationTitle"));
                notification.setContent(rs.getString("NotificationContent"));

                // Chuy·ªÉn ƒë·ªïi Timestamp t·ª´ DB sang LocalDateTime
                Timestamp createdTimestamp = rs.getTimestamp("CreatedTime");
                if (createdTimestamp != null) {
                    notification.setCreatedTime(createdTimestamp.toLocalDateTime());
                }
                notifications.add(notification); // Th√™m th√¥ng b√°o v√†o danh s√°ch
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "L·ªói khi l·∫•y th√¥ng b√°o cho UserID: " + userId, e);
        } finally {
            // ƒê·∫£m b·∫£o ƒë√≥ng t·∫•t c·∫£ t√†i nguy√™n trong kh·ªëi finally
            try {
                if (rs != null) rs.close();
                if (ps != null) ps.close();
                if (con != null) con.close();
            } catch (SQLException ex) {
                LOGGER.log(Level.SEVERE, "L·ªói khi ƒë√≥ng t√†i nguy√™n trong getNotificationsByUserId", ex);
            }
        }
        return notifications;
    }

    public boolean addNotification(int userId, String title, String content) throws ClassNotFoundException {
        // SQL INSERT ch·ªâ bao g·ªìm UserID, Title, Content
        // CreatedTime s·∫Ω ƒë∆∞·ª£c set t·ª± ƒë·ªông b·ªüi DEFAULT GETDATE() trong database
        String sql = "INSERT INTO [dbo].[Notification] (UserID, NotificationTitle, NotificationContent) " +
                     "VALUES (?, ?, ?)";

        ConnectDatabase db = ConnectDatabase.getInstance();
        Connection con = null;
        PreparedStatement ps = null;

        try {
            con = db.openConnection(); // M·ªü k·∫øt n·ªëi
            ps = con.prepareStatement(sql); // Chu·∫©n b·ªã c√¢u l·ªánh SQL

            // ƒê·∫∑t gi√° tr·ªã cho c√°c tham s·ªë
            ps.setInt(1, userId);
            ps.setString(2, title);
            ps.setString(3, content);
            
            // Kh√¥ng c·∫ßn set CreatedTime v√¨ database s·∫Ω t·ª± ƒë·ªông set GETDATE()

            int rowsAffected = ps.executeUpdate(); // Th·ª±c thi c√¢u l·ªánh INSERT
            return rowsAffected > 0; // Tr·∫£ v·ªÅ true n·∫øu c√≥ h√†ng n√†o ƒë∆∞·ª£c th√™m
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "L·ªói khi th√™m th√¥ng b√°o: " + title, e);
            return false;
        } finally {
            // ƒê·∫£m b·∫£o ƒë√≥ng t·∫•t c·∫£ t√†i nguy√™n trong kh·ªëi finally
            try {
                if (ps != null) ps.close();
                if (con != null) con.close();
            } catch (SQLException ex) {
                LOGGER.log(Level.SEVERE, "L·ªói khi ƒë√≥ng t√†i nguy√™n trong addNotification", ex);
            }
        }
    }
    
 
    public void addNotificationToAllUsers(String title, String content) throws ClassNotFoundException {
        UserDAO userDAO = new UserDAO();
        ArrayList<User> allUsers = userDAO.getAllUsers();  
        for (User user : allUsers) {
            try {
                boolean success = addNotification(user.getUserId(), title, content);
                if (success) {
                    NotificationServlet sendPopUp = new NotificationServlet();
                    sendPopUp.sendPopupNotification("üîî New Notification");
                    LOGGER.info("ƒê√£ g·ª≠i th√¥ng b√°o th√†nh c√¥ng cho user ID: " + user.getUserId());
                } else {
                    LOGGER.warning("Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o cho user ID: " + user.getUserId());
                }
            } catch (Exception e) {
                LOGGER.log(Level.SEVERE, "L·ªói khi g·ª≠i th√¥ng b√°o cho user ID: " + user.getUserId(), e);
            }
        }
        LOGGER.info("Ho√†n th√†nh g·ª≠i th√¥ng b√°o. T·ªïng: " + allUsers.size() + " users, Th√†nh c√¥ng: ");
    }
    
     public boolean addNotification(Notification notification) throws ClassNotFoundException {
        // SQL INSERT bao g·ªìm UserID, Title, Content v√† CreatedTime
        // L∆∞u √Ω: N·∫øu c·ªôt CreatedTime trong DB c√≥ DEFAULT (getdate()), b·∫°n c√≥ th·ªÉ b·ªè qua n√≥ trong c√¢u SQL v√† setTimestamp
        String sql = "INSERT INTO [dbo].[Notification] (UserID, NotificationTitle, NotificationContent, CreatedTime) " +
                     "VALUES (?, ?, ?, ?)";

        ConnectDatabase db = ConnectDatabase.getInstance();
        Connection con = null;
        PreparedStatement ps = null;

        try {
            con = db.openConnection(); // M·ªü k·∫øt n·ªëi
            ps = con.prepareStatement(sql); // Chu·∫©n b·ªã c√¢u l·ªánh SQL

            // ƒê·∫∑t gi√° tr·ªã cho c√°c tham s·ªë
            ps.setInt(1, notification.getUserID());
            ps.setString(2, notification.getTitle());
            ps.setString(3, notification.getContent());
            
            // Chuy·ªÉn ƒë·ªïi LocalDateTime sang Timestamp ƒë·ªÉ l∆∞u v√†o DB
            ps.setTimestamp(4, Timestamp.valueOf(notification.getCreatedTime()));

            int rowsAffected = ps.executeUpdate(); // Th·ª±c thi c√¢u l·ªánh UPDATE/INSERT/DELETE
            return rowsAffected > 0; // Tr·∫£ v·ªÅ true n·∫øu c√≥ h√†ng n√†o b·ªã ·∫£nh h∆∞·ªüng
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "L·ªói khi th√™m th√¥ng b√°o: " + notification.getTitle(), e);
            return false;
        } finally {
            // ƒê·∫£m b·∫£o ƒë√≥ng t·∫•t c·∫£ t√†i nguy√™n trong kh·ªëi finally
            try {
                if (ps != null) ps.close();
                if (con != null) con.close();
            } catch (SQLException ex) {
                LOGGER.log(Level.SEVERE, "L·ªói khi ƒë√≥ng t√†i nguy√™n trong addNotification", ex);
            }
        }
    }

}